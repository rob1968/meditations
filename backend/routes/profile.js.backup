const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const User = require('../models/User');
const { auth } = require('../middleware/auth');

// Create profile images directory in static folder
const profileImagesDir = path.join(__dirname, '..', '..', 'static', 'profile-images');
fs.mkdir(profileImagesDir, { recursive: true }).catch(console.error);

// Configure multer for profile image uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // Use temp directory first, we'll move the file later
    const tempDir = path.join(profileImagesDir, 'temp');
    
    // Use sync mkdir instead of async to avoid callback issues
    const fsSync = require('fs');
    try {
      fsSync.mkdirSync(tempDir, { recursive: true });
      cb(null, tempDir);
    } catch (error) {
      console.error('Error creating temp directory:', error);
      cb(error);
    }
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const extension = path.extname(file.originalname) || '.jpg'; // Default to .jpg if no extension
    cb(null, 'profile-' + uniqueSuffix + extension);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB max
  },
  fileFilter: (req, file, cb) => {
    console.log('File filter check:', {
      originalname: file.originalname,
      mimetype: file.mimetype,
      fieldname: file.fieldname
    });
    
    // Check if it's a valid image MIME type
    const isImage = file.mimetype && file.mimetype.startsWith('image/');
    
    // Check if filename has image extension (if available)
    const hasImageExt = file.originalname && /\.(jpeg|jpg|png|gif|webp|avif|bmp|tiff)$/i.test(file.originalname);
    
    // For profile images, be very permissive - allow if:
    // 1. MIME type suggests it's an image, OR
    // 2. Filename suggests it's an image, OR  
    // 3. It's from the profileImage field (trusted source)
    const isProfileImageField = file.fieldname === 'profileImage';
    
    console.log('Validation results:', { isImage, hasImageExt, isProfileImageField, mimetype: file.mimetype });
    
    if (isImage || hasImageExt || isProfileImageField) {
      console.log('File accepted:', file.originalname || 'no-filename');
      return cb(null, true);
    } else {
      console.log('File rejected:', file.originalname, file.mimetype);
      cb(new Error('Only image files are allowed'));
    }
  }
});

// Upload profile image
router.post('/upload-image', async (req, res) => {
  res.status(400).json({ error: 'Upload functionality temporarily disabled for debugging' });
});

// Delete profile image
router.delete('/delete-image', auth, async (req, res) => {
  try {
    const userId = req.user._id;
    
    const user = await User.findById(userId);
    
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    if (!user.profileImage) {
      return res.status(400).json({ error: 'No profile image to delete' });
    }
    
    // Delete image file
    const imagePath = path.join(__dirname, '..', user.profileImage);
    try {
      await fs.unlink(imagePath);
    } catch (err) {
      console.log('Could not delete profile image file:', err.message);
    }
    
    // Remove from database
    user.profileImage = null;
    await user.save();
    
    res.json({ 
      success: true, 
      message: 'Profile image deleted successfully'
    });
    
  } catch (error) {
    console.error('Profile image delete error:', error);
    res.status(500).json({ error: 'Failed to delete profile image' });
  }
});

// Get user profile with image
router.get('/user/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const user = await User.findById(userId).select('-creditTransactions -emergencyContacts');
    
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.json({
      username: user.username,
      profileImage: user.profileImage,
      bio: user.bio,
      location: user.location,
      preferredLanguage: user.preferredLanguage,
      createdAt: user.createdAt,
      credits: user.credits,
      totalMeditations: user.meditations.length
    });
    
  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({ error: 'Failed to get profile' });
  }
});

module.exports = router;