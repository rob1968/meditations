const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const User = require('../models/User');
const { auth } = require('../middleware/auth');

// Create profile images directory
const profileImagesDir = path.join(__dirname, '..', '..', 'static', 'profile-images');
fs.mkdir(profileImagesDir, { recursive: true }).catch(console.error);

// Configure multer for profile image uploads
const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    try {
      await fs.mkdir(profileImagesDir, { recursive: true });
      cb(null, profileImagesDir);
    } catch (error) {
      cb(error);
    }
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const extension = path.extname(file.originalname) || '.jpg';
    cb(null, 'profile-' + uniqueSuffix + extension);
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB max
  fileFilter: (req, file, cb) => {
    const isImage = file.mimetype && file.mimetype.startsWith('image/');
    const hasImageExt = file.originalname && /\.(jpeg|jpg|png|gif|webp|avif|bmp)$/i.test(file.originalname);
    
    if (isImage || hasImageExt || file.fieldname === 'profileImage') {
      console.log('File accepted:', file.originalname || 'no-filename');
      cb(null, true);
    } else {
      console.log('File rejected:', file.originalname, file.mimetype);
      cb(new Error('Only image files are allowed'));
    }
  }
});

// Upload profile image
router.post('/upload-image', auth, (req, res) => {
  console.log('=== PROFILE UPLOAD START ===');
  console.log('User ID from auth:', req.user._id);
  console.log('Content-Type:', req.get('content-type'));
  
  // Use multer middleware
  const uploadMiddleware = upload.single('profileImage');
  
  uploadMiddleware(req, res, async (err) => {
    if (err) {
      console.log('Multer error:', err.message);
      return res.status(400).json({ error: 'File upload error: ' + err.message });
    }
    
    try {
      if (!req.file) {
        console.log('No file provided in request');
        return res.status(400).json({ error: 'No image file provided' });
      }
      
      console.log('File uploaded:', req.file.filename, req.file.size, 'bytes');
      
      // Find and update user
      const user = await User.findById(req.user._id);
      if (!user) {
        console.log('User not found');
        await fs.unlink(req.file.path); // Clean up uploaded file
        return res.status(404).json({ error: 'User not found' });
      }
      
      // Delete old profile image if exists
      if (user.profileImage) {
        const cleanPath = user.profileImage.replace('/static/', '');
        const oldImagePath = path.join(__dirname, '..', '..', cleanPath);
        try {
          await fs.unlink(oldImagePath);
          console.log('Old profile image deleted');
        } catch (err) {
          console.log('Could not delete old profile image:', err.message);
        }
      }
      
      // Save new profile image path to database
      const relativePath = `/static/profile-images/${req.file.filename}`;
      user.profileImage = relativePath;
      await user.save();
      
      console.log('Profile image upload successful');
      res.json({ 
        success: true, 
        profileImage: relativePath,
        message: 'Profile image uploaded successfully'
      });
      
    } catch (error) {
      console.error('Profile image upload error:', error);
      
      // Clean up uploaded file on error
      if (req.file) {
        try {
          await fs.unlink(req.file.path);
        } catch (unlinkErr) {
          console.error('Error deleting file:', unlinkErr);
        }
      }
      
      res.status(500).json({ error: 'Failed to upload profile image' });
    }
  });
});

// Delete profile image
router.delete('/delete-image', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    if (!user.profileImage) {
      return res.status(400).json({ error: 'No profile image to delete' });
    }
    
    // Delete image file
    const cleanPath = user.profileImage.replace('/static/', '');
    const imagePath = path.join(__dirname, '..', '..', cleanPath);
    try {
      await fs.unlink(imagePath);
    } catch (err) {
      console.log('Could not delete profile image file:', err.message);
    }
    
    // Remove from database
    user.profileImage = null;
    await user.save();
    
    res.json({ 
      success: true, 
      message: 'Profile image deleted successfully'
    });
    
  } catch (error) {
    console.error('Profile image delete error:', error);
    res.status(500).json({ error: 'Failed to delete profile image' });
  }
});

// Get user profile
router.get('/user/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const user = await User.findById(userId).select('-creditTransactions -emergencyContacts');
    
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.json({
      username: user.username,
      profileImage: user.profileImage,
      bio: user.bio,
      location: user.location,
      preferredLanguage: user.preferredLanguage,
      createdAt: user.createdAt,
      credits: user.credits,
      totalMeditations: user.meditations.length
    });
    
  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({ error: 'Failed to get profile' });
  }
});

module.exports = router;